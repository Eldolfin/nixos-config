name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check-systems:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        # hostname: ["oscar-portable", "oscar-tour", "oracle-x86", "homeserver"]
        hostname: ["oscar-portable", "oscar-tour"]
    steps:
      - name: maximize build space
        # from https://github.com/easimon/maximize-build-space/blob/master/action.yml
        run: |
          echo "Removing unwanted software... "
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/share/swift
          sudo docker image prune --all --force
          sudo apt-get clean
          echo "... done"
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@v14
      - uses: cachix/cachix-action@v14
        with:
          name: nixos-eldolfin
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Install nix-fast-build
        shell: bash
        run: |
          nix profile install github:Mic92/nix-fast-build
      - uses: DeterminateSystems/flake-checker-action@v8
      - name: Build system config
        run: |
          nix-fast-build --skip-cached --no-nom \
              -f '#nixosConfigurations.${{ matrix.hostname }}.config.system.build.toplevel'

  # check-standalone-homemanager:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: DeterminateSystems/nix-installer-action@main
  #     - uses: cachix/cachix-action@v14
  #       with:
  #         name: nixos-eldolfin
  #         authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
  #     - name: replace 'oscar' with current username
  #       run: find ./homes -type f -name '*.nix' -exec sed -i "s/oscar/$(whoami)/g" {} +
  #     - run: |
  #         nix run home-manager/master -- switch -b bak --flake .
  #         cp -r -L /nix/store/*-home-manager-generation/home-files ./home-files
  #         du -h -d 1 ./home-files
  #         zip -r ./home-files.zip ./home-files --exclude ./home-files/.mozilla ./home-files/Music

  #     - uses: actions/upload-artifact@v4
  #       name: Upload config files
  #       with:
  #         name: home-configs
  #         path: ./home-files.zip
  #         if-no-files-found: error

  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
      pages: write
    steps:
      - name: maximize build space
        # from https://github.com/easimon/maximize-build-space/blob/master/action.yml
        run: |
          echo "Removing unwanted software... "
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          echo "... done"
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@v14
        with:
          extra_nix_config: "system-features = nixos-test benchmark big-parallel kvm"
      - uses: cachix/cachix-action@v14
        with:
          name: nixos-eldolfin
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Install nix-fast-build
        shell: bash
        run: |
          nix profile install github:Mic92/nix-fast-build
      - name: define screenshot output dir
        id: screenshot_path
        run: |
          echo "screenshot_path=screenshots/${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "screenshot_url_base=https://raw.githubusercontent.com/Eldolfin/nixos-config/gh-pages/screenshots/${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Test system config
        run: |
          echo "Running CI tests..."
          nix develop -c just ci
          echo "Creating screenshot directory..."
          mkdir -p ${{ steps.screenshot_path.outputs.screenshot_path }}
          echo "Looking for VM test screenshots..."
          # Copy screenshots if they exist
          if ls /nix/store/*vm-test-run*/*.png 1> /dev/null 2>&1; then
            echo "Found screenshots, copying them..."
            cp /nix/store/*vm-test-run*/*.png ${{ steps.screenshot_path.outputs.screenshot_path }}
            ls -la ${{ steps.screenshot_path.outputs.screenshot_path }}
          else
            echo "No screenshots found in /nix/store/*vm-test-run*/"
          fi

      - name: Upload screenshots as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tests-screenshots
          path: ${{ steps.screenshot_path.outputs.screenshot_path }}
          if-no-files-found: warn

      - name: Push screenshots to github pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: screenshots
          keep_files: true
          enable_jekyll: true
          exclude_assets: '' # avoid removing .github...

      - name: Generate markdown file with test screenshots
        id: comment_file
        run: |
          OUT="pr-comment.md"
          touch "$OUT"
          echo ":wave: Screenshots from the last test run" >> "$OUT"
          if [ -d "${{ steps.screenshot_path.outputs.screenshot_path }}" ] && [ -n "$(ls -A ${{ steps.screenshot_path.outputs.screenshot_path }})" ]; then
            for path in ${{ steps.screenshot_path.outputs.screenshot_path }}/*; do
              filename=$(basename "$path")
              echo "![](${{ steps.screenshot_path.outputs.screenshot_url_base }}/${filename})" >> "$OUT"
            done
          else
            echo "No screenshots available for this run." >> "$OUT"
          fi
          echo "comment_path=${OUT}" >> "$GITHUB_OUTPUT"
          # put it in the action summary too
          cat "$OUT" >> "$GITHUB_STEP_SUMMARY"

      - name: Comment PR with test screenshots
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v3
        with:
          file-path: ${{ steps.comment_file.outputs.comment_path }}
          comment-tag: test-screenshots
